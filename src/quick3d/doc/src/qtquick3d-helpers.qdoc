// Copyright (C) 2019 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only

/*!
    \qmlmodule QtQuick3D.Helpers
    \title Qt Quick 3D Helpers QML Types
    \brief Module containing helpers for creating applications using Qt Quick 3D.

    This module provides helper types that make it easier to develop applications
    using \l{Qt Quick 3D}.
*/

/*!
    \qmltype AxisHelper
    \inqmlmodule QtQuick3D.Helpers
    \inherits Node
    \brief Visual helper for showing the 3 axes and a grid in a 3D scene.

    \image axishelper.jpg

    The X axis is red, the Y axis is green, and the Z axis is blue.

    The example scene here has a Sphere at position \c{(0, 0, 0)} and an
    AxisHelper object. With the WasdController helper one can conveniently
    navigate the scene.

    \badcode
        View3D {
            anchors.fill: parent
            camera: camera

            PerspectiveCamera {
                id: camera
                position: Qt.vector3d(0, 0, 600)
            }

            DirectionalLight {
                position: Qt.vector3d(-500, 500, -100)
                color: Qt.rgba(0.4, 0.2, 0.6, 1.0)
                ambientColor: Qt.rgba(0.1, 0.1, 0.1, 1.0)
            }

            Model {
                source: "#Sphere"
                materials: [ DefaultMaterial { } ]
            }

            AxisHelper {
            }
        }

        WasdController {
            controlledObject: camera
        }
   \endcode
*/

/*! \qmlproperty color AxisHelper::gridColor
    Specifies the color of the grid. The default value is \c{Qt.rgba(0.8, 0.8, 0.8, 1)}.
*/
/*! \qmlproperty real AxisHelper::gridOpacity
    Specifies the opacity of the grid. The default value is 0.5.
*/
/*! \qmlproperty bool AxisHelper::enableXZGrid
    Enables the grid on XZ plane. The default value is true.
*/
/*! \qmlproperty bool AxisHelper::enableXYGrid
    Enables the grid on XY plane. The default value is false.
*/
/*! \qmlproperty bool AxisHelper::enableYZGrid
    Enables the grid on YZ plane. The default value is false.
*/
/*! \qmlproperty bool AxisHelper::enableAxisLines
    Enables showing the axis lines. The default value is true.
*/

/*!
    \qmltype WasdController
    \inqmlmodule QtQuick3D.Helpers
    \inherits Item
    \brief Control node position and orientation with keys and mouse.

    This helper allows the user to control a node using W, A, S, D, the arrow
    keys, and the mouse. Usually the controlled node is a Camera, specified in
    the controlledObject property.

    Adding a WasdController can be highly useful both in applications that wish
    to provide a standard way of navigating the scene, and also as a temporary
    measure during development and troubleshooting, as it allows inspecting the
    scene at run time via familiar keyboard and mouse navigation.

    The key bindings are as follows:

    \list
    \li \c W or \c up - go forward
    \li \c S or \c down - go backward
    \li \c A or \c left - strafe left
    \li \c D or \c right - strafe right
    \li \c R or \c {page up} - move up
    \li \c F or \c {page down} - move down
    \li \c shift together with other keys - move faster, depending on \l shiftSpeed
    \endlist

    The following snippet shows how a WasdController object can be added. By
    default both key and mouse based navigation is active, so in most cases
    there is no further configuration needed:

    \badcode
        View3D {
            anchors.fill: parent
            camera: camera
            PerspectiveCamera {
                id: camera
                position: Qt.vector3d(0, 0, 600)
            }
            ...
        }

        WasdController {
            controlledObject: camera
        }
    \endcode
*/

/*! \qmlproperty QtQuick3D::Node WasdController::controlledObject
    Specifies the node to control. This is typically a Camera object.
*/
/*! \qmlproperty real WasdController::speed
    Specifies the speed of navigation.
*/
/*! \qmlproperty real WasdController::shiftSpeed
    Specifies the speed multiplier that is active when the shift key is pressed.
*/
/*! \qmlproperty real WasdController::forwardSpeed
    Specifies the speed of navigation when the forward key is pressed.
*/
/*! \qmlproperty real WasdController::backSpeed
    Specifies the speed of navigation when the back key is pressed.
*/
/*! \qmlproperty real WasdController::rightSpeed
    Specifies the speed of navigation when the right key is pressed.
*/
/*! \qmlproperty real WasdController::leftSpeed
    Specifies the speed of navigation when the left key is pressed.
*/
/*! \qmlproperty real WasdController::upSpeed
    Specifies the speed of navigation when the up key is pressed.
*/
/*! \qmlproperty real WasdController::downSpeed
    Specifies the speed of navigation when the down key is pressed.
*/
/*! \qmlproperty real WasdController::xSpeed
    Specifies the speed of navigation when the mouse is moved along the X axis.
*/
/*! \qmlproperty real WasdController::ySpeed
    Specifies the speed of navigation when the mouse is moved along the Y axis.
*/
/*! \qmlproperty bool WasdController::xInvert
    Inverts the x-axis controls. The default value is false.
*/
/*! \qmlproperty bool WasdController::yInvert
    Inverts the y-axis controls. The default value is true.
*/
/*! \qmlproperty bool WasdController::mouseEnabled
    Enables mouse controls. The default value is true.
*/
/*! \qmlproperty bool WasdController::keysEnabled
    Enables key controls. The default value is true.
*/
/*! \qmlproperty bool WasdController::inputsNeedProcessing
    This property is true when there are inputs needing processing.
    \readonly
*/
/*! \qmlproperty enumeration WasdController::acceptedButtons
    Specifies the buttons accepted by the controller.
    \sa DragHandler, MultiPointHandler
*/

/*!
    \qmltype DebugView
    \inqmlmodule QtQuick3D.Helpers
    \inherits Rectangle
    \brief View to show rendering statistics and perform debug and developer actions.

    This helper allows viewing render performance statistics of a View3D. It
    shows the FPS, sync and render times. In addition, it can also show
    detailed statistics about draw calls, render passes, and the textures and
    meshes used by the scene's assets. The showing of such extended information
    is controlled by the resourceDetailsVisible property, which defaults to
    false.

    For example, the following snippet shows how a DebugView can be added that
    shows its information in the top-left corner of the Qt Quick scene:

    \badcode
        View3D {
            id: v3d
            anchors.fill: parent
            camera: camera
            PerspectiveCamera {
                id: camera
                position: Qt.vector3d(0, 0, 600)
            }
            ...
        }
        DebugView {
            source: v3d
            resourceDetailsVisible: true
        }
    \endcode

    In addition, the \c Tools section allows performing actions such as turning
    on wireframe rendering, or visualizing various aspects of the material.
*/

/*! \qmlproperty var DebugView::source
    Specifies the source View3D to show the statistics from.
*/

/*! \qmlproperty bool DebugView::resourceDetailsVisible

    Indicates whether the additional fields with detailed render pass, mesh,
    texture, and other resource statistics should be shown by default.

    The default value is false, which means only CPU timings from the last
    rendered frame will be shown, unless the user interactively enables
    additional data via the on-screen checkbox. Change the value to true to make
    more information visible by default. This includes render pass details and
    the active assets for the last rendered frame.
*/

/*!
    \qmltype OrbitCameraController
    \inqmlmodule QtQuick3D.Helpers
    \inherits Item
    \brief Camera Controller which rotates around an origin.

    This helper provides a way to rotate a camera around an origin. To function
    OrbitCameraController accepts a Node as the origin, and a Camera object
    which should be a child of the originNode to control. By only adjusting the z
    position of the child camera relative to the parent origin it has the effect
    of moving the camera nearer or farther from the target origin. By applying
    a rotation to the origin node, the child camera will be orbited around the
    origin node.

    The OrbitCameraController item itself is a 2D item that accepts input events
    so whatever it's size and position will be where input events are accepted.
    To zoom either use the scroll wheel of the mouse or perform a pinch gesture.
    To rotate click or touch and drag the area. To pan, hold control and drag
    the area. Panning will change the position of the origin node. It is also
    possible to perform a panning gesture by performing a two finger drag.

    \badcode
        View3D {
            camera: cameraNode
            Node {
                id: originNode
                PerspectiveCamera {
                    id: cameraNode
                    z: 100
                }
            }
            OrbitCameraController {
                anchors.fill: parent
                origin: originNode
                camera: cameraNode
            }
            ...
        }
    \endcode
*/

/*! \qmlproperty QtQuick3D::Node OrbitCameraController::origin
    Specifies the origin node to control. This is a required property and should
    be the parent of the \l camera
*/
/*! \qmlproperty QtQuick3D::Camera OrbitCameraController::camera
    Specifies the camera node to control. This is a required property and should
    be a child of the \l origin node.
*/
/*! \qmlproperty real OrbitCameraController::xSpeed
    Specifies the speed of navigation when the mouse is moved along the X axis.
*/
/*! \qmlproperty real OrbitCameraController::ySpeed
    Specifies the speed of navigation when the mouse is moved along the Y axis.
*/
/*! \qmlproperty bool OrbitCameraController::xInvert
    Inverts the x-axis controls. The default value is false.
*/
/*! \qmlproperty bool OrbitCameraController::yInvert
    Inverts the y-axis controls. The default value is true.
*/
/*! \qmlproperty bool OrbitCameraController::mouseEnabled
    Enables mouse controls. The default value is true.
*/
/*! \qmlproperty bool OrbitCameraController::panEnabled
    Enables panning controls. The default value is true.
*/

/*!
    \qmltype LodManager
    \inqmlmodule QtQuick3D.Helpers
    \inherits Node
    \brief Manager that handles level of detail visibility changes.

    This helper provides a way to handle level of detail changes. It works
    by changing the visibility of its child nodes based on the distance
    to the camera. The thresholds are determined by the user using the
    distances list. The first distance is the threshold when the manager
    changes from showing the first child and the second child etc. The first
    child should be the most detailed one as it is shown when the camera is
    close. If fadeDistance is set, the manager cross-fades between models by
    changing their opacity. Fading only works with model nodes.

    \badcode
        View3D {
            LodManager {
                camera: camera
                distances: [50, 100]
                fadeDistance: 10

                Model { ... }
                Model { ... }
                Model { ... }
            }
        }
    \endcode
*/

/*! \qmlproperty QtQuick3D::Camera LodManager::camera
    Specifies the camera from which the distance to the child nodes is calculated.
*/

/*! \qmlproperty list LodManager::distances
    Specifies the thresholds when the detail level changes. The first number
    is the distance when the first node changes to the second one, etc.
*/

/*! \qmlproperty real LodManager::fadeDistance
    Specifies the distance at which the cross-fade between the detail levels
    starts.
*/

/*!
    \qmltype ExtendedSceneEnvironment
    \inqmlmodule QtQuick3D.Helpers
    \inherits SceneEnvironment
    \brief SceneEnvironment containing commonly used rendering effects

    The \c ExtendedSceneEnvironment is an extension of QtQuick3D's \l SceneEnvironment type that comes
    with a collection of commonly used effects built-in. The effects are exposed through a set of properties
    that are prefixed with the name of the effect they control.

    \note If additional effects are added to the \l SceneEnvironment, then those effects will be applied \e before
    the effects provided by the \l ExtendedSceneEnvironment type.
*/

// Depth of Field Effect
/*! \qmlproperty bool ExtendedSceneEnvironment::depthOfFieldEnabled
    Enables the depth of field blur effect.

    \default false
*/
/*! \qmlproperty real ExtendedSceneEnvironment::depthOfFieldFocusDistance
    The distance from the camera where the content is in perfect focus.

    \default 600
*/
/*! \qmlproperty real ExtendedSceneEnvironment::depthOfFieldFocusRange
    The distance around the \l {ExtendedSceneEnvironment::depthOfFieldFocusDistance}{depthOfFieldFocusDistance}
    where items are fully in focus. The focus then fades away to fully blurred by the same distance on both the near and far sides.

    \default 100
*/
/*! \qmlproperty real ExtendedSceneEnvironment::depthOfFieldBlurAmount
    The strength of blur when out of focus. Sensible values are in the range \b 1 to \b 10.

    \default 4.0
*/
// Tonemapper
/*! \qmlproperty real ExtendedSceneEnvironment::exposure
    Exposure level used by the tonemapper.

    \default 1.0
*/
/*! \qmlproperty real ExtendedSceneEnvironment::whitePoint

    Reference value for \e white when tonemapping is enabled.
    \note This value is ignored when using \l {SceneEnvironment::TonemapModeLinear}{TonemapModeLinear}

    \default 1
*/
/*! \qmlproperty bool ExtendedSceneEnvironment::ditheringEnabled
    Enables dithering.

    \default false
*/
/*! \qmlproperty real ExtendedSceneEnvironment::sharpnessAmount
    Set the sharpening amount. Valid values are from \c 0.0 (off) to \c 1.0 (full).

    \default 0.0
*/
// FXAA
/*! \qmlproperty bool ExtendedSceneEnvironment::fxaaEnabled
    Enables fast approximate anti-aliasing (FXAA).

    \default false
*/
// Adjustments
/*! \qmlproperty bool ExtendedSceneEnvironment::colorAdjustmentsEnabled

    \default false
    \sa {ExtendedSceneEnvironment::colorAdjustmentsEnabled}{colorAdjustmentsEnabled}
*/
/*! \qmlproperty real ExtendedSceneEnvironment::adjustmentBrightness
    The global brightness adjustment of the output color.

    \default 1
    \note Requires that \l {ExtendedSceneEnvironment::colorAdjustmentsEnabled}{colorAdjustmentsEnabled} is set to \c true.
*/
/*! \qmlproperty real ExtendedSceneEnvironment::adjustmentContrast
    The global contrast adjustment.

    \default 1
    \note Requires that \l {ExtendedSceneEnvironment::colorAdjustmentsEnabled}{colorAdjustmentsEnabled} is set to \c true.
*/
/*! \qmlproperty real ExtendedSceneEnvironment::adjustmentSaturation
    The global adjustment of the saturation of the output.

    \default 1
    \note Requires that \l {ExtendedSceneEnvironment::colorAdjustmentsEnabled}{colorAdjustmentsEnabled} is set to \c true.
*/
// Color Grading Effect
/*! \qmlproperty bool ExtendedSceneEnvironment::lutEnabled
    Enables color grading with look-up-tables (LUTs).

    \default false
*/
/*! \qmlproperty real ExtendedSceneEnvironment::lutSize
    Size of the look-up texture. The look-up textures are 3D textures, so:

    \c {width = lutSize * lutSize}
    and
    \c {height = lutSize}

    \default 16
*/
/*! \qmlproperty real ExtendedSceneEnvironment::lutFilterAlpha
    Alpha filter value. Values from \b 0 to \b 1 are expected.

    \default 1
*/
/*! \qmlproperty Texture ExtendedSceneEnvironment::lutTextureSource
    Source of look-up texture. If no texture is set a built-in identity
    table is used.
*/
// Glow Effect
/*! \qmlproperty bool ExtendedSceneEnvironment::glowEnabled
    Enables the glow effect.

    \default false
*/
/*! \qmlproperty bool ExtendedSceneEnvironment::glowQualityHigh
    Increases the samples used for the glow when down-sampling
    to improve the quality of the glow effect.

    \default false
    \note Enabling this is a trade off between rendering quality and performance. Consider if
    \l {ExtendedSceneEnvironment::ditheringEnabled}{dithering} can be used instead.
    \sa {ExtendedSceneEnvironment::ditheringEnabled}{ditheringEnabled}
*/
/*! \qmlproperty bool ExtendedSceneEnvironment::glowUseBicubicUpscale

    \default false
    \note Using bi-cubic up-scaling will come at the cost of performance.  Consider if
    \l {ExtendedSceneEnvironment::ditheringEnabled}{dithering} can be used instead.
    \sa {ExtendedSceneEnvironment::ditheringEnabled}{ditheringEnabled}
*/
/*! \qmlproperty real ExtendedSceneEnvironment::glowStrength
    Glow strength. Acceptable values are from \b 0 to \b 2.

    \default 1
*/
/*! \qmlproperty real ExtendedSceneEnvironment::glowIntensity
    Glow intensity. Expected values are in the range \b 0 to \b 8.

    \default 0.8
*/
/*! \qmlproperty real ExtendedSceneEnvironment::glowBloom
    The intensity of the bloom. Values from \b 0 to \b 1 are expected.

    \default 0
*/
/*! \qmlproperty int ExtendedSceneEnvironment::glowBlendMode
    Blending mode for the glow effect.

    Available modes are:
     \list
      \li Additive
      \li Screen
      \li SoftLight
      \li Replace
    \endlist

    Usage:
    \badcode
        glowBlendMode = ExtendedSceneEnvironment.GlowBlendMode.SoftLight
    \endcode

    \sa ExtendedSceneEnvironment::GlowBlendMode
    \default ExtendedSceneEnvironment::GlowBlendMode::SoftLight
*/
/*! \qmlproperty real ExtendedSceneEnvironment::glowHDRMaximumValue
    The maximum value for the HDR glow. Value range is from \b 0 to \b 256.

    \default 12.0
*/
/*! \qmlproperty real ExtendedSceneEnvironment::glowHDRMinimumValue
    The minimum value for the HDR glow. Expected values are in the range \b 0 to \b 4.

    \default 1.0
*/
/*! \qmlproperty real ExtendedSceneEnvironment::glowHDRScale
    The bleed scale of the HDR glow. Expected values are in the range \b 0 to \b 8.

    \default 2.0
*/
/*! \qmlproperty int ExtendedSceneEnvironment::glowLevel
    The glow level. There are a total of 7 levels available.

    For exanmple, to enable Glow Level \e One and \e Six we just OR the two enums together:
    \badcode
        glowLevel = (ExtendedSceneEnvironment.GlowLevel.One | ExtendedSceneEnvironment.GlowLevel.Six)
    \endcode

    \default 1
    \sa {ExtendedSceneEnvironment::glowEnabled}{glowEnabled}
*/

*/
// Vignette
/*! \qmlproperty bool ExtendedSceneEnvironment::vignetteEnabled
    Enable the vignette effect.

    \default false
*/
/*! \qmlproperty real ExtendedSceneEnvironment::vignetteStrength
    Specifies the strength of the vignetting. Ranges from \b 0 to \b 15.

    \default 15
*/
/*! \qmlproperty color ExtendedSceneEnvironment::vignetteColor
    Sets the color to use for the vignetting.

    \default "gray"
*/
/*! \qmlproperty real ExtendedSceneEnvironment::vignetteRadius
    Specifies the size of the vignetting. Ranges from \b 0 to \b 5.

    \default 0.35
*/
// Lens Flare
/*! \qmlproperty bool ExtendedSceneEnvironment::lensFlareEnabled
    Enables the lens flare effect.

    \default false
*/
/*! \qmlproperty real ExtendedSceneEnvironment::lensFlareBloomScale
    The scale of the bloom. Expected scale value ranges from \b 0 to \b 20.

    \default 10
*/
/*! \qmlproperty real ExtendedSceneEnvironment::lensFlareBloomBias
    Bloom bias.

    \default 0.95
*/
/*! \qmlproperty real ExtendedSceneEnvironment::lensFlareGhostDispersal
    Ghost dispersal. Expected values are between \b 0 and \b 5.

    \default 0.5
*/
/*! \qmlproperty int ExtendedSceneEnvironment::lensFlareGhostCount
    Rendered ghost count. Expected values are from \b 0 to \b 20.

    \default 4
*/
/*! \qmlproperty real ExtendedSceneEnvironment::lensFlareHaloWidth
    Width of the flare halo, ranges from \b 0 to \b 1.

    \default 0.25
*/
/*! \qmlproperty real ExtendedSceneEnvironment::lensFlareStretchToAspect

    \default 0.5 [0, 1]
*/
/*! \qmlproperty real ExtendedSceneEnvironment::lensFlareDistortion
    Distortion of the lens flare. Expected values ranges from \b 0 to \b 20

    \default 5
*/
/*! \qmlproperty real ExtendedSceneEnvironment::lensFlareBlurAmount
    Flare blur amount. Ranges from \b 0 to \b 5

    \default 3
*/
/*! \qmlproperty bool ExtendedSceneEnvironment::lensFlareApplyDirtTexture
    Enables the lens dirt effect.

    \default false
    \sa {ExtendedSceneEnvironment::lensFlareLensDirtTexture}{lensFlareLensDirtTexture}
*/
/*! \qmlproperty bool ExtendedSceneEnvironment::lensFlareApplyStarburstTexture
    Enables the star burst effect.

    \default false
    \sa {ExtendedSceneEnvironment::lensFlareLensStarburstTexture}{lensFlareLensStarburstTexture}
*/
/*! \qmlproperty vector3d ExtendedSceneEnvironment::lensFlareCameraDirection
    \default Qt.vector3d(0, 0, -1)
*/
/*! \qmlproperty Texture ExtendedSceneEnvironment::lensFlareLensColorTexture
    The texture used to color the lens flare.
 */
/*! \qmlproperty Texture ExtendedSceneEnvironment::lensFlareLensDirtTexture
    The texture used for simulating lens dirt.

    \sa {ExtendedSceneEnvironment::lensFlareApplyDirtTexture}
 */
/*! \qmlproperty Texture ExtendedSceneEnvironment::lensFlareLensStarburstTexture
    The texture used for simulating the starburst effect.

    \sa {ExtendedSceneEnvironment::lensFlareApplyStarburstTexture}{lensFlareApplyStarburstTexture}
*/
