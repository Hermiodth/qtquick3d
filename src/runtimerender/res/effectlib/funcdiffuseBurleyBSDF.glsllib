#include "principledMaterialFresnel.glsllib"

vec4 qt_diffuseBurleyBSDF(in vec3 normal, in vec3 lightDirection, in vec3 viewVector, in vec3 lightDiffuse, in float roughness)
{
    vec3 H = normalize(viewVector + lightDirection);
    float cLdotH = max(0.0, dot(lightDirection, H));
    float cNdotV = max(0.0, dot(normal, viewVector));
    float cNdotL = max(0.0, dot(normal, lightDirection));
    float FD90Minus1 = 2.0 * cLdotH * cLdotH * roughness - 0.5;
    float FdView = 1.0 + FD90Minus1 * qt_schlick(cNdotV);
    float FdLight = 1.0 + FD90Minus1 * qt_schlick(cNdotL);
    float factor = (1.0 / M_PI) * FdView * FdLight * cNdotL;

    return vec4(factor * lightDiffuse, 1.0);
}
