/****************************************************************************
**
** Copyright (C) 2020 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \example intro
    \ingroup quick3d-examples
    \title Qt Quick 3D - Introduction
    \brief Demonstrates how to render a scene in Qt Quick 3D.
    \image intro.png

    This example gives an introductory overview of the basic Quick 3D features by going through the code of a simple example.

    \section1 Setting Up the Scene

    We set up the entire scene in the \e main.qml file.

    To be able to use the types in the QtQuick3D module, we must import it:

    \snippet intro/main.qml import

    To draw any 3D scene, it first need to be rendered and flattened into a 2D surface. This functionality is provided by the View3D class, and this is where we define our scene. It is also possible to have several views in one application, see \l{Qt Quick 3D - View3D Example}.

    We start with defining the environment of our scene. In this example we just clear the background color with \c skyblue, which we specify in a SceneEnvironment for the \c environment property of the view. The SceneEnvironment class is used to specify various properties relating to the environment of the scene, like setting a background color or adding a skybox. You can also control things like anti-aliasing, see \l{Qt Quick 3D - Antialiasing Example}. In our example we set the \c clearColor and \c backgroundMode properties accordingly to get the blue background.

    \snippet intro/main.qml environment

    \section1 Meshes

    To make the scene a bit more interesting we are now going to add some meshes. In Quick 3D there are three builtin meshes for convenience; a sphere, a cube and a rectangle. You can add them by using the identifiers \c #Sphere, \c #Cube and \c #Rectangle in the source property of a Model node. You can of course also add any supported mesh, but it first needs to be processed using \l{Balsam Asset Import Tool}. Below shows the code adding a blue sphere and a red flattened cylinder:

    \snippet intro/main.qml objects

    To add the meshes we use two Model nodes, using \c #Sphere and \c #Cylinder as the source to load our built-in meshes. To give the model a color we need to first specify a material. In this case we use a default material with a red and blue diffuse color. There are three different materials available with different properties, namely DefaultMaterial, PrincipledMaterial and CustomMaterial, see \l{Qt Quick 3D - Principled Material Example}. To position the meshes we use the \c position property. It is also possible to rotate the model by setting the \c eulerRotation property. To make the cylinder look like a plate we set the \c scale property accordingly.

    \section1 Camera

    Then we define a camera which represents the viewport of the rendered scene. In this example, we use \l PerspectiveCamera which shows perspective viewport in a general 3D scene. A orthographic view is also possible by using the OrthographicCamera instead. Because we want to define some objects around the origin, we move this camera to the rear position and rotate slightly.

    \snippet intro/main.qml camera

    \section1 Lights

    The scene also needs a light source to be able to do any meaningful rendering. A DirectionalLight, which can be thought of as a distant sun shining from a certain direction, is added to the scene. There are two other light sources available, namely SpotLight and PointLight, see \l{Qt Quick 3D - Lights Example}.

    \snippet intro/main.qml light

    \section1 Animation

    Finally, we are also going to animate the sphere. We do this by applying a SequentialAnimation on the \c y component, moving the sphere up and down infinitely.

    \snippet intro/main.qml animation

    With all these parts working together we are able to render our 3D scene. There is of course possible to do much more with Quick 3D, so visit the \l{Qt Quick 3D Examples and Tutorials}{examples} page for further examples.

*/
