/****************************************************************************
**
** Copyright (C) 2019 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \example custommaterial
    \ingroup quick3d-examples
    \title Qt Quick 3D - Custom Materials Example
    \brief Demonstrates writing shaded custom materials.
    \image custommaterial-example.jpg

    The custom material implemented in the example has its
    \l{CustomMaterial::shadingMode}{shadingMode} property set to \c
    CustomMaterial.Shaded. This means that rather than providing a completely
    custom snippet to serve as the vertex and fragment shader main function,
    the shader snippets provide multiple functions that are then invoked by the
    shader code generated by Qt. This way the resulting material participates
    in lighting, shadow mapping, and is compatible with light probes.

    The objects in the scene all have a CustomMaterial on them. Yet, they take
    the lights in the scene into account, can receive shadows, and can also
    generate useful rendering results when the SceneEnvironment has a light
    probe set. This is achieved by effectively augmenting the shader code
    that would be generated for a PrincipledMaterial with our own custom
    functions that get called at certain stages in the vertex and fragment
    shaders.

    This example is the counterpart to the \l{Qt Quick 3D - Custom Shaders
    Example}{customshaders example}, which demonstrates the other group of
    custom materials: unshaded custom materials that provide most of the
    vertex and fragment shader code on its own.

*/
